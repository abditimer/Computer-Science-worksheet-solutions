package Ex1;

import static org.junit.Assert.*;
import org.junit.Test;

/**
 * Public test created for the first Exercise on Worksheet 5; Sudoku
 * <p>
 * The program has been created in order to print a sudoku The program
 * identifies where there are gaps in the numbers that will be fed into the
 * Sudoku, and whereever there is a 0 within the array of numbers it will
 * replace it with a space, which indicates to the user that there is an empty
 * slot in that position. This program has been written mainly to get the Sudoku
 * to print in the fashion needed, including different types of borders that
 * allows the user to identify where the different numbers are.
 * 
 * @author Abdikhaliq Timer
 * @version 27/11/2016
 *
 */
public class SudokuTest {
	/**
	 * The intial test, test1, is to test if it prints the simplest of Sudoku.
	 */
	@Test
	public void test1() {
		int[][] test1 = { { 1, 2, 3, 4, 5, 6, 7, 8, 9 }, { 4, 5, 6, 7, 8, 9, 1, 2, 3 }, { 7, 8, 9, 1, 2, 3, 4, 5, 6 },
				{ 2, 3, 4, 5, 6, 7, 8, 9, 1 }, { 5, 6, 7, 8, 9, 1, 2, 3, 4 }, { 8, 9, 1, 2, 3, 4, 5, 6, 7 },
				{ 3, 4, 5, 6, 7, 8, 9, 1, 2 }, { 6, 7, 8, 9, 1, 2, 3, 4, 5 }, { 9, 1, 2, 3, 4, 5, 6, 7, 8 } };

		String expected = ("++===+===+===++===+===+===++===+===+===++" + "\n"
				+ "|| 1 | 2 | 3 || 4 | 5 | 6 || 7 | 8 | 9 ||" + "\n" + "++---+---+---++---+---+---++---+---+---++"
				+ "\n" + "|| 4 | 5 | 6 || 7 | 8 | 9 || 1 | 2 | 3 ||" + "\n"
				+ "++---+---+---++---+---+---++---+---+---++" + "\n" + "|| 7 | 8 | 9 || 1 | 2 | 3 || 4 | 5 | 6 ||"
				+ "\n" + "++===+===+===++===+===+===++===+===+===++" + "\n"
				+ "|| 2 | 3 | 4 || 5 | 6 | 7 || 8 | 9 | 1 ||" + "\n" + "++---+---+---++---+---+---++---+---+---++"
				+ "\n" + "|| 5 | 6 | 7 || 8 | 9 | 1 || 2 | 3 | 4 ||" + "\n"
				+ "++---+---+---++---+---+---++---+---+---++" + "\n" + "|| 8 | 9 | 1 || 2 | 3 | 4 || 5 | 6 | 7 ||"
				+ "\n" + "++===+===+===++===+===+===++===+===+===++" + "\n"
				+ "|| 3 | 4 | 5 || 6 | 7 | 8 || 9 | 1 | 2 ||" + "\n" + "++---+---+---++---+---+---++---+---+---++"
				+ "\n" + "|| 6 | 7 | 8 || 9 | 1 | 2 || 3 | 4 | 5 ||" + "\n"
				+ "++---+---+---++---+---+---++---+---+---++" + "\n" + "|| 9 | 1 | 2 || 3 | 4 | 5 || 6 | 7 | 8 ||"
				+ "\n" + "++===+===+===++===+===+===++===+===+===++" + "\n");

		Sudoku actual = new Sudoku(test1);
		assertEquals(expected, actual.toString());

	}

	/**
	 * test2, now tests if we replace one of the numbers with a larger number.
	 */
	@Test
	public void test2() {
		int[][] test1 = { { 100, 2, 3, 4, 5, 6, 7, 8, 100 }, { 4, 5, 6, 7, 8, 9, 1, 2, 3 },
				{ 7, 8, 9, 1, 2, 3, 4, 5, 6 }, { 2, 3, 4, 5, 6, 7, 8, 9, 1 }, { 5, 6, 7, 8, 9, 1, 2, 3, 4 },
				{ 8, 9, 1, 2, 3, 4, 5, 6, 7 }, { 3, 4, 5, 6, 7, 8, 9, 1, 2 }, { 6, 7, 8, 9, 1, 2, 3, 4, 5 },
				{ 9, 1, 2, 3, 4, 5, 6, 7, 8 } };

		String expected = ("++===+===+===++===+===+===++===+===+===++" + "\n"
				+ "|| 100 | 2 | 3 || 4 | 5 | 6 || 7 | 8 | 100 ||" + "\n" + "++---+---+---++---+---+---++---+---+---++"
				+ "\n" + "|| 4 | 5 | 6 || 7 | 8 | 9 || 1 | 2 | 3 ||" + "\n"
				+ "++---+---+---++---+---+---++---+---+---++" + "\n" + "|| 7 | 8 | 9 || 1 | 2 | 3 || 4 | 5 | 6 ||"
				+ "\n" + "++===+===+===++===+===+===++===+===+===++" + "\n"
				+ "|| 2 | 3 | 4 || 5 | 6 | 7 || 8 | 9 | 1 ||" + "\n" + "++---+---+---++---+---+---++---+---+---++"
				+ "\n" + "|| 5 | 6 | 7 || 8 | 9 | 1 || 2 | 3 | 4 ||" + "\n"
				+ "++---+---+---++---+---+---++---+---+---++" + "\n" + "|| 8 | 9 | 1 || 2 | 3 | 4 || 5 | 6 | 7 ||"
				+ "\n" + "++===+===+===++===+===+===++===+===+===++" + "\n"
				+ "|| 3 | 4 | 5 || 6 | 7 | 8 || 9 | 1 | 2 ||" + "\n" + "++---+---+---++---+---+---++---+---+---++"
				+ "\n" + "|| 6 | 7 | 8 || 9 | 1 | 2 || 3 | 4 | 5 ||" + "\n"
				+ "++---+---+---++---+---+---++---+---+---++" + "\n" + "|| 9 | 1 | 2 || 3 | 4 | 5 || 6 | 7 | 8 ||"
				+ "\n" + "++===+===+===++===+===+===++===+===+===++" + "\n");

		Sudoku actual = new Sudoku(test1);
		assertEquals(expected, actual.toString());

	}

	/**
	 * test3 now checks what the program does when the Sudoku only has one 0.
	 */
	@Test
	public void test3() {
		int[][] test1 = { { 0, 2, 3, 4, 5, 6, 7, 8, 9 }, { 4, 5, 6, 7, 8, 9, 1, 2, 3 }, { 7, 8, 9, 1, 2, 3, 4, 5, 6 },
				{ 2, 3, 4, 5, 6, 7, 8, 9, 1 }, { 5, 6, 7, 8, 9, 1, 2, 3, 4 }, { 8, 9, 1, 2, 3, 4, 5, 6, 7 },
				{ 3, 4, 5, 6, 7, 8, 9, 1, 2 }, { 6, 7, 8, 9, 1, 2, 3, 4, 5 }, { 9, 1, 2, 3, 4, 5, 6, 7, 8 } };

		String expected = ("++===+===+===++===+===+===++===+===+===++" + "\n"
				+ "||   | 2 | 3 || 4 | 5 | 6 || 7 | 8 | 9 ||" + "\n" + "++---+---+---++---+---+---++---+---+---++"
				+ "\n" + "|| 4 | 5 | 6 || 7 | 8 | 9 || 1 | 2 | 3 ||" + "\n"
				+ "++---+---+---++---+---+---++---+---+---++" + "\n" + "|| 7 | 8 | 9 || 1 | 2 | 3 || 4 | 5 | 6 ||"
				+ "\n" + "++===+===+===++===+===+===++===+===+===++" + "\n"
				+ "|| 2 | 3 | 4 || 5 | 6 | 7 || 8 | 9 | 1 ||" + "\n" + "++---+---+---++---+---+---++---+---+---++"
				+ "\n" + "|| 5 | 6 | 7 || 8 | 9 | 1 || 2 | 3 | 4 ||" + "\n"
				+ "++---+---+---++---+---+---++---+---+---++" + "\n" + "|| 8 | 9 | 1 || 2 | 3 | 4 || 5 | 6 | 7 ||"
				+ "\n" + "++===+===+===++===+===+===++===+===+===++" + "\n"
				+ "|| 3 | 4 | 5 || 6 | 7 | 8 || 9 | 1 | 2 ||" + "\n" + "++---+---+---++---+---+---++---+---+---++"
				+ "\n" + "|| 6 | 7 | 8 || 9 | 1 | 2 || 3 | 4 | 5 ||" + "\n"
				+ "++---+---+---++---+---+---++---+---+---++" + "\n" + "|| 9 | 1 | 2 || 3 | 4 | 5 || 6 | 7 | 8 ||"
				+ "\n" + "++===+===+===++===+===+===++===+===+===++" + "\n");

		Sudoku actual = new Sudoku(test1);
		assertEquals(expected, actual.toString());
	}

	/**
	 * test4 now checks what the program does when the Sudoku only has more than
	 * one 0.
	 */
	@Test
	public void test4() {
		int[][] test1 = { { 1, 2, 3, 4, 5, 6, 7, 8, 9 }, { 4, 5, 6, 7, 8, 9, 1, 2, 3 }, { 7, 8, 9, 1, 2, 3, 4, 5, 6 },
				{ 2, 3, 4, 5, 6, 7, 8, 9, 1 }, { 5, 6, 7, 8, 0, 1, 2, 3, 4 }, { 8, 9, 1, 2, 3, 4, 5, 6, 7 },
				{ 3, 4, 5, 6, 7, 8, 9, 1, 2 }, { 0, 7, 8, 9, 1, 2, 3, 4, 5 }, { 9, 1, 2, 3, 4, 5, 6, 7, 0 } };

		String expected = ("++===+===+===++===+===+===++===+===+===++" + "\n"
				+ "|| 1 | 2 | 3 || 4 | 5 | 6 || 7 | 8 | 9 ||" + "\n" + "++---+---+---++---+---+---++---+---+---++"
				+ "\n" + "|| 4 | 5 | 6 || 7 | 8 | 9 || 1 | 2 | 3 ||" + "\n"
				+ "++---+---+---++---+---+---++---+---+---++" + "\n" + "|| 7 | 8 | 9 || 1 | 2 | 3 || 4 | 5 | 6 ||"
				+ "\n" + "++===+===+===++===+===+===++===+===+===++" + "\n"
				+ "|| 2 | 3 | 4 || 5 | 6 | 7 || 8 | 9 | 1 ||" + "\n" + "++---+---+---++---+---+---++---+---+---++"
				+ "\n" + "|| 5 | 6 | 7 || 8 |   | 1 || 2 | 3 | 4 ||" + "\n"
				+ "++---+---+---++---+---+---++---+---+---++" + "\n" + "|| 8 | 9 | 1 || 2 | 3 | 4 || 5 | 6 | 7 ||"
				+ "\n" + "++===+===+===++===+===+===++===+===+===++" + "\n"
				+ "|| 3 | 4 | 5 || 6 | 7 | 8 || 9 | 1 | 2 ||" + "\n" + "++---+---+---++---+---+---++---+---+---++"
				+ "\n" + "||   | 7 | 8 || 9 | 1 | 2 || 3 | 4 | 5 ||" + "\n"
				+ "++---+---+---++---+---+---++---+---+---++" + "\n" + "|| 9 | 1 | 2 || 3 | 4 | 5 || 6 | 7 |   ||"
				+ "\n" + "++===+===+===++===+===+===++===+===+===++" + "\n");

		Sudoku actual = new Sudoku(test1);
		assertEquals(expected, actual.toString());
	}

	/**
	 * test5 now checks what the program will do if all fields are empty.
	 */
	@Test
	public void test5() {
		int[][] test1 = { { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0 }, };

		String expected = ("++===+===+===++===+===+===++===+===+===++" + "\n"
				+ "||   |   |   ||   |   |   ||   |   |   ||" + "\n" + "++---+---+---++---+---+---++---+---+---++"
				+ "\n" + "||   |   |   ||   |   |   ||   |   |   ||" + "\n"
				+ "++---+---+---++---+---+---++---+---+---++" + "\n" + "||   |   |   ||   |   |   ||   |   |   ||"
				+ "\n" + "++===+===+===++===+===+===++===+===+===++" + "\n"
				+ "||   |   |   ||   |   |   ||   |   |   ||" + "\n" + "++---+---+---++---+---+---++---+---+---++"
				+ "\n" + "||   |   |   ||   |   |   ||   |   |   ||" + "\n"
				+ "++---+---+---++---+---+---++---+---+---++" + "\n" + "||   |   |   ||   |   |   ||   |   |   ||"
				+ "\n" + "++===+===+===++===+===+===++===+===+===++" + "\n"
				+ "||   |   |   ||   |   |   ||   |   |   ||" + "\n" + "++---+---+---++---+---+---++---+---+---++"
				+ "\n" + "||   |   |   ||   |   |   ||   |   |   ||" + "\n"
				+ "++---+---+---++---+---+---++---+---+---++" + "\n" + "||   |   |   ||   |   |   ||   |   |   ||"
				+ "\n" + "++===+===+===++===+===+===++===+===+===++" + "\n");

		Sudoku actual = new Sudoku(test1);
		assertEquals(expected, actual.toString());
	}
	/**
	 * test6, is to test whether the method isFilled is working correctly. In this case, it should return true.
	 */
	@Test
	public void test6() {
		int[][] test6 = { { 1, 2, 3, 4, 5, 6, 7, 8, 9 }, { 4, 5, 6, 7, 8, 9, 1, 2, 3 }, { 7, 8, 9, 1, 2, 3, 4, 5, 6 },
				{ 2, 3, 4, 5, 6, 7, 8, 9, 1 }, { 5, 6, 7, 8, 9, 1, 2, 3, 4 }, { 8, 9, 1, 2, 3, 4, 5, 6, 7 },
				{ 3, 4, 5, 6, 7, 8, 9, 1, 2 }, { 6, 7, 8, 9, 1, 2, 3, 4, 5 }, { 9, 1, 2, 3, 4, 5, 6, 7, 8 } };

		Boolean test = Sudoku.isFilled(test6);
		
		assertTrue(test);

	}
	/**
	 * test7, is to test the method isFilled when there are empty spaces.
	 */
	@Test
	public void test7() {
		int[][] test7 = { { 0, 2, 3, 4, 5, 6, 7, 8, 9 }, { 4, 5, 6, 7, 8, 9, 1, 2, 3 }, { 7, 8, 9, 1, 2, 3, 4, 5, 6 },
				{ 2, 3, 4, 5, 6, 7, 8, 9, 1 }, { 5, 6, 7, 8, 9, 1, 2, 3, 4 }, { 8, 9, 1, 2, 3, 4, 5, 6, 7 },
				{ 3, 4, 5, 6, 7, 8, 9, 1, 2 }, { 6, 7, 8, 9, 1, 2, 3, 4, 5 }, { 9, 1, 2, 3, 4, 5, 6, 7, 8 } };

		Boolean test = Sudoku.isFilled(test7);
		//this will only pass if false is returned from the isFilled method
		assertFalse(test);

	}
	/**
	 * test8, is to test the method isFilled when there are multiple empty spaces.
	 */
	@Test
	public void test8() {
		int[][] test8 = { { 0, 2, 3, 4, 5, 6, 0, 8, 9 }, { 4, 5, 6, 7, 8, 9, 1, 2, 3 }, { 7, 0, 9, 1, 2, 3, 4, 5, 6 },
				{ 2, 3, 4, 5, 6, 7, 8, 9, 1 }, { 5, 6, 7, 8, 9, 1, 2, 3, 4 }, { 8, 9, 1, 2, 3, 4, 5, 6, 7 },
				{ 3, 4, 5, 6, 7, 0, 9, 1, 2 }, { 6, 7, 8, 9, 1, 0, 3, 4, 5 }, { 9, 1, 2, 3, 4, 5, 6, 0, 8 } };

		Boolean test = Sudoku.isFilled(test8);
		//this will only pass if false is returned from the isFilled method
		assertFalse(test);

	}
}
